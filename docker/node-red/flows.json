[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Main Flow",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e561d8b14d1739f3",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "noise/#",
        "qos": "2",
        "datatype": "json",
        "broker": "a6dc2e72f2b21fa9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 320,
        "wires": [
            [
                "8301894363428aaf"
            ]
        ]
    },
    {
        "id": "ee3afde62f58b5f8",
        "type": "catch",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 400,
        "y": 160,
        "wires": [
            [
                "e104f6bb0276b869"
            ]
        ]
    },
    {
        "id": "e104f6bb0276b869",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 160,
        "wires": []
    },
    {
        "id": "f8bf5f409c29f7e4",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Reading, validating and storing measures from MQTT",
        "info": "",
        "x": 540,
        "y": 260,
        "wires": []
    },
    {
        "id": "8301894363428aaf",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "name": "Set region",
        "rules": [
            {
                "t": "set",
                "p": "region",
                "pt": "msg",
                "to": "$number($match(topic, /noise\\/region(\\d+)$/).groups[0])",
                "tot": "jsonata"
            },
            {
                "t": "delete",
                "p": "qos",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retain",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 320,
        "wires": [
            [
                "dfd664982dfb26d5"
            ]
        ]
    },
    {
        "id": "dfd664982dfb26d5",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Check region",
        "func": "if (msg.topic == null || msg.region == null) {\n    node.error(\"Discarded measure: invalid MQTT Topic\", msg);\n} else {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 320,
        "wires": [
            [
                "85ef5fa06e3cb2a6"
            ]
        ]
    },
    {
        "id": "da3499d9781014eb",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Error catching",
        "info": "",
        "x": 410,
        "y": 100,
        "wires": []
    },
    {
        "id": "7ef5e23e96835592",
        "type": "mysql",
        "z": "f6f2187d.f17ca8",
        "mydb": "57d039c00858e3f2",
        "name": "",
        "x": 1430,
        "y": 420,
        "wires": [
            [
                "b90ca2e46ba74822"
            ]
        ]
    },
    {
        "id": "9eaebe999303fd1d",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "name": "Preparing Distance Query",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[coordX, coordY, region]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT id, ROUND(SQRT(POW(coord_x - ?, 2) + POW(coord_y - ?, 2)), 4) AS distance  FROM point_of_interest  WHERE region = ? ORDER BY distance LIMIT 1;",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 420,
        "wires": [
            [
                "7ef5e23e96835592"
            ]
        ]
    },
    {
        "id": "b90ca2e46ba74822",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "name": "Prepare for noise array split",
        "rules": [
            {
                "t": "set",
                "p": "nearestPoint",
                "pt": "msg",
                "to": "payload[0] != null ? payload[0].id : null",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "noise",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "noise",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 520,
        "wires": [
            [
                "d85f4b25ecee2e0f"
            ]
        ]
    },
    {
        "id": "d85f4b25ecee2e0f",
        "type": "split",
        "z": "f6f2187d.f17ca8",
        "name": "Noise split",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 520,
        "wires": [
            [
                "e47d5bea0a9d9a1b"
            ]
        ]
    },
    {
        "id": "e47d5bea0a9d9a1b",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "name": "Preparing for insert",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[payload, region, coordX, coordY, nearestPoint]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "INSERT INTO noise_measure VALUES (NULL, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP);",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 520,
        "wires": [
            [
                "51818a8620e27c54"
            ]
        ]
    },
    {
        "id": "51818a8620e27c54",
        "type": "mysql",
        "z": "f6f2187d.f17ca8",
        "mydb": "57d039c00858e3f2",
        "name": "",
        "x": 1090,
        "y": 520,
        "wires": [
            [
                "c7dd97140c5de899"
            ]
        ]
    },
    {
        "id": "c7dd97140c5de899",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Noise measure inserted\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 520,
        "wires": []
    },
    {
        "id": "85ef5fa06e3cb2a6",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Check JSON schema",
        "func": "var Ajv = global.get(\"ajv\");\nconst ajv = new Ajv();\n\nconst validate = ajv.compile(global.get(\"schema\"))\nconst valid = validate(msg.payload)\n\nif (!valid) {\n    node.error(\"Discarded measure: invalid JSON\", msg);\n} else {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 320,
        "wires": [
            [
                "b12c68311921557e"
            ]
        ]
    },
    {
        "id": "b12c68311921557e",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "name": "Setting message properties",
        "rules": [
            {
                "t": "set",
                "p": "noise",
                "pt": "msg",
                "to": "(payload.mode = \"raw\" ? payload.noise : [payload.noise])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "coordY",
                "pt": "msg",
                "to": "payload.coordY",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "coordX",
                "pt": "msg",
                "to": "payload.coordX",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 320,
        "wires": [
            [
                "776859adb61dc7ba"
            ]
        ]
    },
    {
        "id": "776859adb61dc7ba",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "name": "Preparing region boundaries query",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[region, coordX, coordY]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT * FROM region WHERE id = ? AND ? BETWEEN min_x AND max_x AND ? BETWEEN min_y AND max_y;",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 420,
        "wires": [
            [
                "2879b7696be6799d"
            ]
        ]
    },
    {
        "id": "2879b7696be6799d",
        "type": "mysql",
        "z": "f6f2187d.f17ca8",
        "mydb": "57d039c00858e3f2",
        "name": "",
        "x": 730,
        "y": 420,
        "wires": [
            [
                "0979c75be55a0945"
            ]
        ]
    },
    {
        "id": "0979c75be55a0945",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Check region boundaries ",
        "func": "if (msg.payload.length == 0) {\n    node.error(\"Discarded measure: invalid region boundaries\", msg);\n} else {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 420,
        "wires": [
            [
                "9eaebe999303fd1d"
            ]
        ]
    },
    {
        "id": "a6dc2e72f2b21fa9",
        "type": "mqtt-broker",
        "name": "Local Broker",
        "broker": "mqtt",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "57d039c00858e3f2",
        "type": "MySQLdatabase",
        "name": "",
        "host": "db",
        "port": "3306",
        "db": "noise_level",
        "tz": "",
        "charset": "UTF8"
    }
]